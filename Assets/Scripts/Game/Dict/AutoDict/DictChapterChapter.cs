//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictChapterChapter
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 章节id
        /// </summary>
        public string id;
     /// <summary>
        /// 章节名字
        /// </summary>
        public string name;
     /// <summary>
        /// 场景
        /// </summary>
        public string map;
     /// <summary>
        /// 备注
        /// </summary>
        public string detail;
     /// <summary>
        /// 章节顺序
        /// </summary>
        public XorInt order_xor;
     /// <summary>
        /// 章节顺序
        /// </summary>
        public int order{
            get{
                return order_xor.val;
            }
        }
     /// <summary>
        /// 章节类型
        /// </summary>
        public string chapter_type;
     /// <summary>
        /// 是否爬塔
        /// </summary>
        public XorInt is_pata_xor;
     /// <summary>
        /// 是否爬塔
        /// </summary>
        public int is_pata{
            get{
                return is_pata_xor.val;
            }
        }
     /// <summary>
        /// 是否记录层数
        /// </summary>
        public XorInt is_recordOrder_xor;
     /// <summary>
        /// 是否记录层数
        /// </summary>
        public int is_recordOrder{
            get{
                return is_recordOrder_xor.val;
            }
        }
     /// <summary>
        /// 层数每日重置
        /// </summary>
        public XorInt order_reset_daily_xor;
     /// <summary>
        /// 层数每日重置
        /// </summary>
        public int order_reset_daily{
            get{
                return order_reset_daily_xor.val;
            }
        }
     /// <summary>
        /// 是否是试炼章节
        /// </summary>
        public XorInt is_shilianChapter_xor;
     /// <summary>
        /// 是否是试炼章节
        /// </summary>
        public int is_shilianChapter{
            get{
                return is_shilianChapter_xor.val;
            }
        }
     /// <summary>
        /// 等级要求
        /// </summary>
        public XorInt level_limit_xor;
     /// <summary>
        /// 等级要求
        /// </summary>
        public int level_limit{
            get{
                return level_limit_xor.val;
            }
        }
     /// <summary>
        /// 副本次数限制
        /// </summary>
        public XorInt max_cout_xor;
     /// <summary>
        /// 副本次数限制
        /// </summary>
        public int max_cout{
            get{
                return max_cout_xor.val;
            }
        }
     /// <summary>
        /// 重置挑战次数花费
        /// </summary>
        public XorInt reset_cost_ruby_xor;
     /// <summary>
        /// 重置挑战次数花费
        /// </summary>
        public int reset_cost_ruby{
            get{
                return reset_cost_ruby_xor.val;
            }
        }
     /// <summary>
        /// 挑战boss剧情ID
        /// </summary>
        public string battle_boss_story_id;
     /// <summary>
        /// 战斗缩放时间
        /// </summary>
        public XorDouble time_scale_xor;
     /// <summary>
        /// 战斗缩放时间
        /// </summary>
        public double time_scale{
            get{
                return time_scale_xor.val;
            }
        }
     /// <summary>
        /// 章节内容
        /// </summary>
        public string word;
     /// <summary>
        /// 掉落
        /// </summary>
        public string drop;
     /// <summary>
        /// 章节回合数
        /// </summary>
        public string max_round;

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<string, Model> m_dict;

    // Get The Dictionary
    public Dictionary<string, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(string id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictChapterChapter m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_chapter_chapter.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<string,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["id"]]);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.map = DictTypeConvert.ParseString(str[fileReader.typeName2Index["map"]]);
            model.detail = DictTypeConvert.ParseString(str[fileReader.typeName2Index["detail"]]);
            model.order_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["order"]]),fileReader.randomUtil);
            model.chapter_type = DictTypeConvert.ParseString(str[fileReader.typeName2Index["chapter_type"]]);
            model.is_pata_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["is_pata"]]),fileReader.randomUtil);
            model.is_recordOrder_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["is_recordOrder"]]),fileReader.randomUtil);
            model.order_reset_daily_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["order_reset_daily"]]),fileReader.randomUtil);
            model.is_shilianChapter_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["is_shilianChapter"]]),fileReader.randomUtil);
            model.level_limit_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["level_limit"]]),fileReader.randomUtil);
            model.max_cout_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["max_cout"]]),fileReader.randomUtil);
            model.reset_cost_ruby_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["reset_cost_ruby"]]),fileReader.randomUtil);
            model.battle_boss_story_id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["battle_boss_story_id"]]);
            model.time_scale_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["time_scale"]]),fileReader.randomUtil);
            model.word = DictTypeConvert.ParseString(str[fileReader.typeName2Index["word"]]);
            model.drop = DictTypeConvert.ParseString(str[fileReader.typeName2Index["drop"]]);
            model.max_round = DictTypeConvert.ParseString(str[fileReader.typeName2Index["max_round"]]);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictChapterChapter Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
