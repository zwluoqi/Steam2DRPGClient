//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictPlayerFenshen
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 主键对应物品ID
        /// </summary>
        public string id;
     /// <summary>
        /// 凝聚前置任务
        /// </summary>
        public List<string> advance_task;
     /// <summary>
        /// 凝聚前置消耗
        /// </summary>
        public List<string> custom_tasks;
     /// <summary>
        /// 凝聚过程需要共鸣数值
        /// </summary>
        public XorInt cost_kuang_val_xor;
     /// <summary>
        /// 凝聚过程需要共鸣数值
        /// </summary>
        public int cost_kuang_val{
            get{
                return cost_kuang_val_xor.val;
            }
        }
     /// <summary>
        /// 凝聚过程最低需要共鸣数值
        /// </summary>
        public XorInt min_kuang_val_xor;
     /// <summary>
        /// 凝聚过程最低需要共鸣数值
        /// </summary>
        public int min_kuang_val{
            get{
                return min_kuang_val_xor.val;
            }
        }
     /// <summary>
        /// 凝聚过程需要载数
        /// </summary>
        public XorInt cost_years_xor;
     /// <summary>
        /// 凝聚过程需要载数
        /// </summary>
        public int cost_years{
            get{
                return cost_years_xor.val;
            }
        }
     /// <summary>
        /// 凝聚失败返还材料比例
        /// </summary>
        public XorDouble failed_ret_per_xor;
     /// <summary>
        /// 凝聚失败返还材料比例
        /// </summary>
        public double failed_ret_per{
            get{
                return failed_ret_per_xor.val;
            }
        }
     /// <summary>
        /// 最高等级
        /// </summary>
        public XorInt max_lev_xor;
     /// <summary>
        /// 最高等级
        /// </summary>
        public int max_lev{
            get{
                return max_lev_xor.val;
            }
        }

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<string, Model> m_dict;

    // Get The Dictionary
    public Dictionary<string, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(string id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictPlayerFenshen m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_player_fenshen.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<string,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["id"]]);
            model.advance_task = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["advance_task"]]);
            model.custom_tasks = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["custom_tasks"]]);
            model.cost_kuang_val_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["cost_kuang_val"]]),fileReader.randomUtil);
            model.min_kuang_val_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["min_kuang_val"]]),fileReader.randomUtil);
            model.cost_years_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["cost_years"]]),fileReader.randomUtil);
            model.failed_ret_per_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["failed_ret_per"]]),fileReader.randomUtil);
            model.max_lev_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["max_lev"]]),fileReader.randomUtil);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictPlayerFenshen Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
