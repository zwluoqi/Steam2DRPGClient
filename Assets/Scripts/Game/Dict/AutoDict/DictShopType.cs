//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictShopType
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// classId
        /// </summary>
        public XorInt classId_xor;
     /// <summary>
        /// classId
        /// </summary>
        public int classId{
            get{
                return classId_xor.val;
            }
        }
     /// <summary>
        /// 展示英雄ID
        /// </summary>
        public string heroId;
     /// <summary>
        /// 商店名称
        /// </summary>
        public string name;
     /// <summary>
        /// 商店货币单位
        /// </summary>
        public string huobi;
     /// <summary>
        /// 商店货币图片
        /// </summary>
        public string icon;
     /// <summary>
        /// 自动刷新时间间隔（h）
        /// </summary>
        public XorInt autoFreshTime_xor;
     /// <summary>
        /// 自动刷新时间间隔（h）
        /// </summary>
        public int autoFreshTime{
            get{
                return autoFreshTime_xor.val;
            }
        }
     /// <summary>
        /// 默认显示
        /// </summary>
        public XorInt default_show_xor;
     /// <summary>
        /// 默认显示
        /// </summary>
        public int default_show{
            get{
                return default_show_xor.val;
            }
        }
     /// <summary>
        /// 商店集合
        /// </summary>
        public XorInt shop_collection_xor;
     /// <summary>
        /// 商店集合
        /// </summary>
        public int shop_collection{
            get{
                return shop_collection_xor.val;
            }
        }
     /// <summary>
        /// 单次显示最大数量
        /// </summary>
        public XorInt once_show_max_xor;
     /// <summary>
        /// 单次显示最大数量
        /// </summary>
        public int once_show_max{
            get{
                return once_show_max_xor.val;
            }
        }
     /// <summary>
        /// 是否支持手动刷新
        /// </summary>
        public XorInt support_manul_fresh_xor;
     /// <summary>
        /// 是否支持手动刷新
        /// </summary>
        public int support_manul_fresh{
            get{
                return support_manul_fresh_xor.val;
            }
        }

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<int, Model> m_dict;

    // Get The Dictionary
    public Dictionary<int, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(int classId)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictShopType m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(classId))
            {
                return m_dict[classId];
            }
            else
            {
                Debug.LogError ("error id:"+classId);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_shop_type.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<int,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.classId_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["classId"]]),fileReader.randomUtil);
            model.heroId = DictTypeConvert.ParseString(str[fileReader.typeName2Index["heroId"]]);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.huobi = DictTypeConvert.ParseString(str[fileReader.typeName2Index["huobi"]]);
            model.icon = DictTypeConvert.ParseString(str[fileReader.typeName2Index["icon"]]);
            model.autoFreshTime_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["autoFreshTime"]]),fileReader.randomUtil);
            model.default_show_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["default_show"]]),fileReader.randomUtil);
            model.shop_collection_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["shop_collection"]]),fileReader.randomUtil);
            model.once_show_max_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["once_show_max"]]),fileReader.randomUtil);
            model.support_manul_fresh_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["support_manul_fresh"]]),fileReader.randomUtil);

            if (m_dict.ContainsKey(model.classId) == false)
            {
                m_dict.Add(model.classId, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictShopType Parse:Same Key = " + model.classId);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
