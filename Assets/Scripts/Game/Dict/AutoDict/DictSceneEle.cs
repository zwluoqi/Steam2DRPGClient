//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictSceneEle
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// #
        /// </summary>
        public XorInt ID_xor;
     /// <summary>
        /// #
        /// </summary>
        public int ID{
            get{
                return ID_xor.val;
            }
        }
     /// <summary>
        /// 说明
        /// </summary>
        public string name;
     /// <summary>
        /// 详细描述
        /// </summary>
        public string detail;
     /// <summary>
        /// 元素颜色
        /// </summary>
        public string score_color;
     /// <summary>
        /// 方块是否有外框
        /// </summary>
        public XorInt ifwai_kuang_xor;
     /// <summary>
        /// 方块是否有外框
        /// </summary>
        public int ifwai_kuang{
            get{
                return ifwai_kuang_xor.val;
            }
        }
     /// <summary>
        /// 方块在元素上方或下方（-1不能放置元素无意义、0为下方，1为上方）
        /// </summary>
        public XorInt updown_xor;
     /// <summary>
        /// 方块在元素上方或下方（-1不能放置元素无意义、0为下方，1为上方）
        /// </summary>
        public int updown{
            get{
                return updown_xor.val;
            }
        }
     /// <summary>
        /// 放置元素是否可移动
        /// </summary>
        public XorInt can_move_xor;
     /// <summary>
        /// 放置元素是否可移动
        /// </summary>
        public int can_move{
            get{
                return can_move_xor.val;
            }
        }
     /// <summary>
        /// 该位置能否被元素通过
        /// </summary>
        public XorInt can_through_xor;
     /// <summary>
        /// 该位置能否被元素通过
        /// </summary>
        public int can_through{
            get{
                return can_through_xor.val;
            }
        }
     /// <summary>
        /// 能否被其他方块覆盖
        /// </summary>
        public XorInt can_coverByOther_xor;
     /// <summary>
        /// 能否被其他方块覆盖
        /// </summary>
        public int can_coverByOther{
            get{
                return can_coverByOther_xor.val;
            }
        }
     /// <summary>
        /// 放置元素能在方块消除前消除
        /// </summary>
        public XorInt eliminateBeforeRemoved_xor;
     /// <summary>
        /// 放置元素能在方块消除前消除
        /// </summary>
        public int eliminateBeforeRemoved{
            get{
                return eliminateBeforeRemoved_xor.val;
            }
        }
     /// <summary>
        /// 放置元素能被道具消除
        /// </summary>
        public XorInt elimilateByEquip_xor;
     /// <summary>
        /// 放置元素能被道具消除
        /// </summary>
        public int elimilateByEquip{
            get{
                return elimilateByEquip_xor.val;
            }
        }
     /// <summary>
        /// 放置元素能被万能元素影响消除
        /// </summary>
        public XorInt elimilateByMiracle_xor;
     /// <summary>
        /// 放置元素能被万能元素影响消除
        /// </summary>
        public int elimilateByMiracle{
            get{
                return elimilateByMiracle_xor.val;
            }
        }
     /// <summary>
        /// 放置元素能被四消影响消除
        /// </summary>
        public XorInt elimilateBySpecial_xor;
     /// <summary>
        /// 放置元素能被四消影响消除
        /// </summary>
        public int elimilateBySpecial{
            get{
                return elimilateBySpecial_xor.val;
            }
        }
     /// <summary>
        /// 放置元素能否被检测消除
        /// </summary>
        public XorInt elimilateByCheck_xor;
     /// <summary>
        /// 放置元素能否被检测消除
        /// </summary>
        public int elimilateByCheck{
            get{
                return elimilateByCheck_xor.val;
            }
        }
     /// <summary>
        /// 如果每步没有消除，则在周围增加同一元素
        /// </summary>
        public XorInt addifnotdisappear_xor;
     /// <summary>
        /// 如果每步没有消除，则在周围增加同一元素
        /// </summary>
        public int addifnotdisappear{
            get{
                return addifnotdisappear_xor.val;
            }
        }
     /// <summary>
        /// 如果没有被消除，则随机移动到周围
        /// </summary>
        public XorInt moveifnotdisappear_xor;
     /// <summary>
        /// 如果没有被消除，则随机移动到周围
        /// </summary>
        public int moveifnotdisappear{
            get{
                return moveifnotdisappear_xor.val;
            }
        }
     /// <summary>
        /// 放置的元素消除1次后自身消失
        /// </summary>
        public XorInt disappearBySelf_xor;
     /// <summary>
        /// 放置的元素消除1次后自身消失
        /// </summary>
        public int disappearBySelf{
            get{
                return disappearBySelf_xor.val;
            }
        }
     /// <summary>
        /// 被周围影响消除1次后消失(0表示不消除)
        /// </summary>
        public XorInt disappearByOther_xor;
     /// <summary>
        /// 被周围影响消除1次后消失(0表示不消除)
        /// </summary>
        public int disappearByOther{
            get{
                return disappearByOther_xor.val;
            }
        }
     /// <summary>
        /// 方块下面的方块ID
        /// </summary>
        public XorInt squareAtDown_xor;
     /// <summary>
        /// 方块下面的方块ID
        /// </summary>
        public int squareAtDown{
            get{
                return squareAtDown_xor.val;
            }
        }
     /// <summary>
        /// 消失后得到的道具ID
        /// </summary>
        public XorInt equipID_xor;
     /// <summary>
        /// 消失后得到的道具ID
        /// </summary>
        public int equipID{
            get{
                return equipID_xor.val;
            }
        }
     /// <summary>
        /// 消失后得到的道具数量
        /// </summary>
        public XorInt equipNum_xor;
     /// <summary>
        /// 消失后得到的道具数量
        /// </summary>
        public int equipNum{
            get{
                return equipNum_xor.val;
            }
        }
     /// <summary>
        /// 消失后完成的任务类型ID（待建表）
        /// </summary>
        public XorInt missionID_xor;
     /// <summary>
        /// 消失后完成的任务类型ID（待建表）
        /// </summary>
        public int missionID{
            get{
                return missionID_xor.val;
            }
        }
     /// <summary>
        /// 消失后完成的任务数量
        /// </summary>
        public XorInt missionNum_xor;
     /// <summary>
        /// 消失后完成的任务数量
        /// </summary>
        public int missionNum{
            get{
                return missionNum_xor.val;
            }
        }
     /// <summary>
        /// 消除后得到的数值（2.体力，1.金币，0.砖石） 
        /// </summary>
        public XorInt dataID_xor;
     /// <summary>
        /// 消除后得到的数值（2.体力，1.金币，0.砖石） 
        /// </summary>
        public int dataID{
            get{
                return dataID_xor.val;
            }
        }
     /// <summary>
        /// 消除后得到的数量
        /// </summary>
        public XorInt dataNum_xor;
     /// <summary>
        /// 消除后得到的数量
        /// </summary>
        public int dataNum{
            get{
                return dataNum_xor.val;
            }
        }
     /// <summary>
        /// 基本分数
        /// </summary>
        public XorInt base_score_xor;
     /// <summary>
        /// 基本分数
        /// </summary>
        public int base_score{
            get{
                return base_score_xor.val;
            }
        }
     /// <summary>
        /// 使用的图标名称
        /// </summary>
        public string spriteName;
     /// <summary>
        /// 编辑器界面使用的图标
        /// </summary>
        public string SpriteNameInEditor;
     /// <summary>
        /// 默认血量
        /// </summary>
        public XorInt defaultHP_xor;
     /// <summary>
        /// 默认血量
        /// </summary>
        public int defaultHP{
            get{
                return defaultHP_xor.val;
            }
        }
     /// <summary>
        /// 消除时特效1
        /// </summary>
        public XorInt particle1_xor;
     /// <summary>
        /// 消除时特效1
        /// </summary>
        public int particle1{
            get{
                return particle1_xor.val;
            }
        }
     /// <summary>
        /// 消除时特效2
        /// </summary>
        public XorInt particle2_xor;
     /// <summary>
        /// 消除时特效2
        /// </summary>
        public int particle2{
            get{
                return particle2_xor.val;
            }
        }
     /// <summary>
        /// 消除时特效3
        /// </summary>
        public XorInt particle3_xor;
     /// <summary>
        /// 消除时特效3
        /// </summary>
        public int particle3{
            get{
                return particle3_xor.val;
            }
        }
     /// <summary>
        /// 消除时产生的声音
        /// </summary>
        public string eliminateSound;
     /// <summary>
        /// 形成时产生的声音
        /// </summary>
        public string produceSound;
     /// <summary>
        /// 产生时特效
        /// </summary>
        public XorInt produceParticle_xor;
     /// <summary>
        /// 产生时特效
        /// </summary>
        public int produceParticle{
            get{
                return produceParticle_xor.val;
            }
        }

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<int, Model> m_dict;

    // Get The Dictionary
    public Dictionary<int, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(int ID)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictSceneEle m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(ID))
            {
                return m_dict[ID];
            }
            else
            {
                Debug.LogError ("error id:"+ID);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_scene_ele.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<int,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.ID_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["ID"]]),fileReader.randomUtil);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.detail = DictTypeConvert.ParseString(str[fileReader.typeName2Index["detail"]]);
            model.score_color = DictTypeConvert.ParseString(str[fileReader.typeName2Index["score_color"]]);
            model.ifwai_kuang_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["ifwai_kuang"]]),fileReader.randomUtil);
            model.updown_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["updown"]]),fileReader.randomUtil);
            model.can_move_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["can_move"]]),fileReader.randomUtil);
            model.can_through_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["can_through"]]),fileReader.randomUtil);
            model.can_coverByOther_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["can_coverByOther"]]),fileReader.randomUtil);
            model.eliminateBeforeRemoved_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["eliminateBeforeRemoved"]]),fileReader.randomUtil);
            model.elimilateByEquip_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["elimilateByEquip"]]),fileReader.randomUtil);
            model.elimilateByMiracle_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["elimilateByMiracle"]]),fileReader.randomUtil);
            model.elimilateBySpecial_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["elimilateBySpecial"]]),fileReader.randomUtil);
            model.elimilateByCheck_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["elimilateByCheck"]]),fileReader.randomUtil);
            model.addifnotdisappear_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["addifnotdisappear"]]),fileReader.randomUtil);
            model.moveifnotdisappear_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["moveifnotdisappear"]]),fileReader.randomUtil);
            model.disappearBySelf_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["disappearBySelf"]]),fileReader.randomUtil);
            model.disappearByOther_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["disappearByOther"]]),fileReader.randomUtil);
            model.squareAtDown_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["squareAtDown"]]),fileReader.randomUtil);
            model.equipID_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["equipID"]]),fileReader.randomUtil);
            model.equipNum_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["equipNum"]]),fileReader.randomUtil);
            model.missionID_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["missionID"]]),fileReader.randomUtil);
            model.missionNum_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["missionNum"]]),fileReader.randomUtil);
            model.dataID_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["dataID"]]),fileReader.randomUtil);
            model.dataNum_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["dataNum"]]),fileReader.randomUtil);
            model.base_score_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["base_score"]]),fileReader.randomUtil);
            model.spriteName = DictTypeConvert.ParseString(str[fileReader.typeName2Index["spriteName"]]);
            model.SpriteNameInEditor = DictTypeConvert.ParseString(str[fileReader.typeName2Index["SpriteNameInEditor"]]);
            model.defaultHP_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["defaultHP"]]),fileReader.randomUtil);
            model.particle1_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["particle1"]]),fileReader.randomUtil);
            model.particle2_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["particle2"]]),fileReader.randomUtil);
            model.particle3_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["particle3"]]),fileReader.randomUtil);
            model.eliminateSound = DictTypeConvert.ParseString(str[fileReader.typeName2Index["eliminateSound"]]);
            model.produceSound = DictTypeConvert.ParseString(str[fileReader.typeName2Index["produceSound"]]);
            model.produceParticle_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["produceParticle"]]),fileReader.randomUtil);

            if (m_dict.ContainsKey(model.ID) == false)
            {
                m_dict.Add(model.ID, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictSceneEle Parse:Same Key = " + model.ID);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
