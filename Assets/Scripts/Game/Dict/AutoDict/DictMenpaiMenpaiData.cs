//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictMenpaiMenpaiData
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 英雄id
        /// </summary>
        public XorInt id_xor;
     /// <summary>
        /// 英雄id
        /// </summary>
        public int id{
            get{
                return id_xor.val;
            }
        }
     /// <summary>
        /// 名字
        /// </summary>
        public string name;
     /// <summary>
        /// icon
        /// </summary>
        public string icon;
     /// <summary>
        /// 镇派法宝
        /// </summary>
        public string zhenpaifabao;
     /// <summary>
        /// 镇派宝典
        /// </summary>
        public string zhenpaibaodian;
     /// <summary>
        /// 祖师
        /// </summary>
        public string zushi;
     /// <summary>
        /// 掌门
        /// </summary>
        public string zhangmen;
     /// <summary>
        /// 门派境地副本
        /// </summary>
        public string jindiId;
     /// <summary>
        /// 机缘次数
        /// </summary>
        public XorInt addjiyuanTimes_xor;
     /// <summary>
        /// 机缘次数
        /// </summary>
        public int addjiyuanTimes{
            get{
                return addjiyuanTimes_xor.val;
            }
        }
     /// <summary>
        /// 入门等级
        /// </summary>
        public XorInt addLevel_xor;
     /// <summary>
        /// 入门等级
        /// </summary>
        public int addLevel{
            get{
                return addLevel_xor.val;
            }
        }
     /// <summary>
        /// 入门初始属性选择匹配
        /// </summary>
        public List<int> born_attri;
     /// <summary>
        /// 入门形象匹配
        /// </summary>
        public List<int> born_image;
     /// <summary>
        /// 入门出生匹配
        /// </summary>
        public List<int> born_jiyuan;
     /// <summary>
        /// 概率(万分之N)
        /// </summary>
        public XorInt rate_xor;
     /// <summary>
        /// 概率(万分之N)
        /// </summary>
        public int rate{
            get{
                return rate_xor.val;
            }
        }
     /// <summary>
        /// 允许退出次数
        /// </summary>
        public XorInt allowExitTimes_xor;
     /// <summary>
        /// 允许退出次数
        /// </summary>
        public int allowExitTimes{
            get{
                return allowExitTimes_xor.val;
            }
        }
     /// <summary>
        /// 名声类型
        /// </summary>
        public string mingshengType;
     /// <summary>
        /// 名声值
        /// </summary>
        public XorInt mingshengValue_xor;
     /// <summary>
        /// 名声值
        /// </summary>
        public int mingshengValue{
            get{
                return mingshengValue_xor.val;
            }
        }
     /// <summary>
        /// 通用入门条件
        /// </summary>
        public List<string> join_conditions;
     /// <summary>
        /// 描述一
        /// </summary>
        public string desc01;
     /// <summary>
        /// 描述二
        /// </summary>
        public string desc02;
     /// <summary>
        /// 日志
        /// </summary>
        public string log;

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<int, Model> m_dict;

    // Get The Dictionary
    public Dictionary<int, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(int id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictMenpaiMenpaiData m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_menpai_menpai_data.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<int,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["id"]]),fileReader.randomUtil);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.icon = DictTypeConvert.ParseString(str[fileReader.typeName2Index["icon"]]);
            model.zhenpaifabao = DictTypeConvert.ParseString(str[fileReader.typeName2Index["zhenpaifabao"]]);
            model.zhenpaibaodian = DictTypeConvert.ParseString(str[fileReader.typeName2Index["zhenpaibaodian"]]);
            model.zushi = DictTypeConvert.ParseString(str[fileReader.typeName2Index["zushi"]]);
            model.zhangmen = DictTypeConvert.ParseString(str[fileReader.typeName2Index["zhangmen"]]);
            model.jindiId = DictTypeConvert.ParseString(str[fileReader.typeName2Index["jindiId"]]);
            model.addjiyuanTimes_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["addjiyuanTimes"]]),fileReader.randomUtil);
            model.addLevel_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["addLevel"]]),fileReader.randomUtil);
            model.born_attri = DictTypeConvert.ParseArrayInt(str[fileReader.typeName2Index["born_attri"]]);
            model.born_image = DictTypeConvert.ParseArrayInt(str[fileReader.typeName2Index["born_image"]]);
            model.born_jiyuan = DictTypeConvert.ParseArrayInt(str[fileReader.typeName2Index["born_jiyuan"]]);
            model.rate_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["rate"]]),fileReader.randomUtil);
            model.allowExitTimes_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["allowExitTimes"]]),fileReader.randomUtil);
            model.mingshengType = DictTypeConvert.ParseString(str[fileReader.typeName2Index["mingshengType"]]);
            model.mingshengValue_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["mingshengValue"]]),fileReader.randomUtil);
            model.join_conditions = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["join_conditions"]]);
            model.desc01 = DictTypeConvert.ParseString(str[fileReader.typeName2Index["desc01"]]);
            model.desc02 = DictTypeConvert.ParseString(str[fileReader.typeName2Index["desc02"]]);
            model.log = DictTypeConvert.ParseString(str[fileReader.typeName2Index["log"]]);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictMenpaiMenpaiData Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
