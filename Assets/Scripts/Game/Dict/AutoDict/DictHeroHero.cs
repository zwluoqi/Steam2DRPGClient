//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictHeroHero
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 英雄id
        /// </summary>
        public string id;
     /// <summary>
        /// 名字
        /// </summary>
        public string name;
     /// <summary>
        /// 形象
        /// </summary>
        public string hero_icon;
     /// <summary>
        /// 形象
        /// </summary>
        public string resoure_name;
     /// <summary>
        /// 默认技能
        /// </summary>
        public List<string> default_skill;
     /// <summary>
        /// 升星碎片物品
        /// </summary>
        public string star_up_good_id;
     /// <summary>
        /// 攻击
        /// </summary>
        public XorDouble attack_xor;
     /// <summary>
        /// 攻击
        /// </summary>
        public double attack{
            get{
                return attack_xor.val;
            }
        }
     /// <summary>
        /// 攻击成长
        /// </summary>
        public XorDouble attack_lev_xor;
     /// <summary>
        /// 攻击成长
        /// </summary>
        public double attack_lev{
            get{
                return attack_lev_xor.val;
            }
        }
     /// <summary>
        /// 防御
        /// </summary>
        public XorDouble defence_xor;
     /// <summary>
        /// 防御
        /// </summary>
        public double defence{
            get{
                return defence_xor.val;
            }
        }
     /// <summary>
        /// 防御成长
        /// </summary>
        public XorDouble defence_lev_xor;
     /// <summary>
        /// 防御成长
        /// </summary>
        public double defence_lev{
            get{
                return defence_lev_xor.val;
            }
        }
     /// <summary>
        /// 血量
        /// </summary>
        public XorDouble hp_xor;
     /// <summary>
        /// 血量
        /// </summary>
        public double hp{
            get{
                return hp_xor.val;
            }
        }
     /// <summary>
        /// 血量成长
        /// </summary>
        public XorDouble hp_lev_xor;
     /// <summary>
        /// 血量成长
        /// </summary>
        public double hp_lev{
            get{
                return hp_lev_xor.val;
            }
        }
     /// <summary>
        /// 魔法
        /// </summary>
        public XorDouble mp_xor;
     /// <summary>
        /// 魔法
        /// </summary>
        public double mp{
            get{
                return mp_xor.val;
            }
        }
     /// <summary>
        /// 魔法成长
        /// </summary>
        public XorDouble mp_lev_xor;
     /// <summary>
        /// 魔法成长
        /// </summary>
        public double mp_lev{
            get{
                return mp_lev_xor.val;
            }
        }
     /// <summary>
        /// 筋骨
        /// </summary>
        public XorDouble jingu_xor;
     /// <summary>
        /// 筋骨
        /// </summary>
        public double jingu{
            get{
                return jingu_xor.val;
            }
        }
     /// <summary>
        /// 筋骨成长
        /// </summary>
        public XorDouble jingu_lev_xor;
     /// <summary>
        /// 筋骨成长
        /// </summary>
        public double jingu_lev{
            get{
                return jingu_lev_xor.val;
            }
        }
     /// <summary>
        /// 身法
        /// </summary>
        public XorDouble shenfa_xor;
     /// <summary>
        /// 身法
        /// </summary>
        public double shenfa{
            get{
                return shenfa_xor.val;
            }
        }
     /// <summary>
        /// 身法成长
        /// </summary>
        public XorDouble shenfa_lev_xor;
     /// <summary>
        /// 身法成长
        /// </summary>
        public double shenfa_lev{
            get{
                return shenfa_lev_xor.val;
            }
        }
     /// <summary>
        /// 内力
        /// </summary>
        public XorDouble neili_xor;
     /// <summary>
        /// 内力
        /// </summary>
        public double neili{
            get{
                return neili_xor.val;
            }
        }
     /// <summary>
        /// 内力成长
        /// </summary>
        public XorDouble neili_lev_xor;
     /// <summary>
        /// 内力成长
        /// </summary>
        public double neili_lev{
            get{
                return neili_lev_xor.val;
            }
        }
     /// <summary>
        /// 武器类型
        /// </summary>
        public List<string> weapon_type;
     /// <summary>
        /// 品质
        /// </summary>
        public XorInt qulity_xor;
     /// <summary>
        /// 品质
        /// </summary>
        public int qulity{
            get{
                return qulity_xor.val;
            }
        }
     /// <summary>
        /// 英雄是否可拥有
        /// </summary>
        public XorInt can_has_xor;
     /// <summary>
        /// 英雄是否可拥有
        /// </summary>
        public int can_has{
            get{
                return can_has_xor.val;
            }
        }
     /// <summary>
        /// 英雄属性类型
        /// </summary>
        public XorInt hero_type_xor;
     /// <summary>
        /// 英雄属性类型
        /// </summary>
        public int hero_type{
            get{
                return hero_type_xor.val;
            }
        }
     /// <summary>
        /// 门派类型
        /// </summary>
        public XorInt menpai_xor;
     /// <summary>
        /// 门派类型
        /// </summary>
        public int menpai{
            get{
                return menpai_xor.val;
            }
        }
     /// <summary>
        /// 英雄诗句
        /// </summary>
        public string hero_jueju;
     /// <summary>
        /// 英雄说明
        /// </summary>
        public string hero_story;
     /// <summary>
        /// 初始选择类型
        /// </summary>
        public XorInt init_select_xor;
     /// <summary>
        /// 初始选择类型
        /// </summary>
        public int init_select{
            get{
                return init_select_xor.val;
            }
        }
     /// <summary>
        /// 角色大类
        /// </summary>
        public XorInt hero_class_xor;
     /// <summary>
        /// 角色大类
        /// </summary>
        public int hero_class{
            get{
                return hero_class_xor.val;
            }
        }
     /// <summary>
        /// 角色定位
        /// </summary>
        public string hero_dingwei;
     /// <summary>
        /// 点击音效
        /// </summary>
        public List<string> audio_clip;
     /// <summary>
        /// 英雄定位
        /// </summary>
        public string name_abc;
     /// <summary>
        /// 召唤消耗碎片
        /// </summary>
        public XorInt summon_cost_good_num_xor;
     /// <summary>
        /// 召唤消耗碎片
        /// </summary>
        public int summon_cost_good_num{
            get{
                return summon_cost_good_num_xor.val;
            }
        }
     /// <summary>
        /// 分解获得英雄精华
        /// </summary>
        public XorInt resolve_hero_val_xor;
     /// <summary>
        /// 分解获得英雄精华
        /// </summary>
        public int resolve_hero_val{
            get{
                return resolve_hero_val_xor.val;
            }
        }
     /// <summary>
        /// 攻击速度
        /// </summary>
        public XorDouble attack_speed_xor;
     /// <summary>
        /// 攻击速度
        /// </summary>
        public double attack_speed{
            get{
                return attack_speed_xor.val;
            }
        }
     /// <summary>
        /// 获取
        /// </summary>
        public List<string> fromIds;

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<string, Model> m_dict;

    // Get The Dictionary
    public Dictionary<string, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(string id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictHeroHero m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_hero_hero.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<string,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["id"]]);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.hero_icon = DictTypeConvert.ParseString(str[fileReader.typeName2Index["hero_icon"]]);
            model.resoure_name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["resoure_name"]]);
            model.default_skill = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["default_skill"]]);
            model.star_up_good_id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["star_up_good_id"]]);
            model.attack_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["attack"]]),fileReader.randomUtil);
            model.attack_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["attack_lev"]]),fileReader.randomUtil);
            model.defence_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["defence"]]),fileReader.randomUtil);
            model.defence_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["defence_lev"]]),fileReader.randomUtil);
            model.hp_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["hp"]]),fileReader.randomUtil);
            model.hp_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["hp_lev"]]),fileReader.randomUtil);
            model.mp_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["mp"]]),fileReader.randomUtil);
            model.mp_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["mp_lev"]]),fileReader.randomUtil);
            model.jingu_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["jingu"]]),fileReader.randomUtil);
            model.jingu_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["jingu_lev"]]),fileReader.randomUtil);
            model.shenfa_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["shenfa"]]),fileReader.randomUtil);
            model.shenfa_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["shenfa_lev"]]),fileReader.randomUtil);
            model.neili_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["neili"]]),fileReader.randomUtil);
            model.neili_lev_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["neili_lev"]]),fileReader.randomUtil);
            model.weapon_type = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["weapon_type"]]);
            model.qulity_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["qulity"]]),fileReader.randomUtil);
            model.can_has_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["can_has"]]),fileReader.randomUtil);
            model.hero_type_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["hero_type"]]),fileReader.randomUtil);
            model.menpai_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["menpai"]]),fileReader.randomUtil);
            model.hero_jueju = DictTypeConvert.ParseString(str[fileReader.typeName2Index["hero_jueju"]]);
            model.hero_story = DictTypeConvert.ParseString(str[fileReader.typeName2Index["hero_story"]]);
            model.init_select_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["init_select"]]),fileReader.randomUtil);
            model.hero_class_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["hero_class"]]),fileReader.randomUtil);
            model.hero_dingwei = DictTypeConvert.ParseString(str[fileReader.typeName2Index["hero_dingwei"]]);
            model.audio_clip = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["audio_clip"]]);
            model.name_abc = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name_abc"]]);
            model.summon_cost_good_num_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["summon_cost_good_num"]]),fileReader.randomUtil);
            model.resolve_hero_val_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["resolve_hero_val"]]),fileReader.randomUtil);
            model.attack_speed_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["attack_speed"]]),fileReader.randomUtil);
            model.fromIds = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["fromIds"]]);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictHeroHero Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
