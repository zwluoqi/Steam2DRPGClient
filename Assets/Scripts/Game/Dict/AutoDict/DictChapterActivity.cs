//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictChapterActivity
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 主键ID
        /// </summary>
        public string id;
     /// <summary>
        /// 名字
        /// </summary>
        public string aName;
     /// <summary>
        /// 活动介绍
        /// </summary>
        public string desc;
     /// <summary>
        /// 活动模式
        /// </summary>
        public XorInt game_type_xor;
     /// <summary>
        /// 活动模式
        /// </summary>
        public int game_type{
            get{
                return game_type_xor.val;
            }
        }
     /// <summary>
        /// 商店Id或招募ID
        /// </summary>
        public XorInt shopType_xor;
     /// <summary>
        /// 商店Id或招募ID
        /// </summary>
        public int shopType{
            get{
                return shopType_xor.val;
            }
        }
     /// <summary>
        /// 开放时间
        /// </summary>
        public string open_time;
     /// <summary>
        /// 结束时间
        /// </summary>
        public string end_time;
     /// <summary>
        /// 商店顺延时长
        /// </summary>
        public XorInt shop_end_days_xor;
     /// <summary>
        /// 商店顺延时长
        /// </summary>
        public int shop_end_days{
            get{
                return shop_end_days_xor.val;
            }
        }
     /// <summary>
        /// 萌新奖励倍数
        /// </summary>
        public XorDouble new_player_double_reward_xor;
     /// <summary>
        /// 萌新奖励倍数
        /// </summary>
        public double new_player_double_reward{
            get{
                return new_player_double_reward_xor.val;
            }
        }
     /// <summary>
        /// 能量球
        /// </summary>
        public string tili_prop;
     /// <summary>
        /// 能量球CD
        /// </summary>
        public XorInt cooldown_xor;
     /// <summary>
        /// 能量球CD
        /// </summary>
        public int cooldown{
            get{
                return cooldown_xor.val;
            }
        }
     /// <summary>
        /// 能量球上限
        /// </summary>
        public XorInt max_prop_xor;
     /// <summary>
        /// 能量球上限
        /// </summary>
        public int max_prop{
            get{
                return max_prop_xor.val;
            }
        }
     /// <summary>
        /// 能量购买灵石消耗
        /// </summary>
        public XorInt reset_cost_ruby_xor;
     /// <summary>
        /// 能量购买灵石消耗
        /// </summary>
        public int reset_cost_ruby{
            get{
                return reset_cost_ruby_xor.val;
            }
        }
     /// <summary>
        /// 英雄奖励队列
        /// </summary>
        public List<string> add_reward_heros;
     /// <summary>
        /// 奖励伤害初始阶梯
        /// </summary>
        public XorInt init_damage_factors_xor;
     /// <summary>
        /// 奖励伤害初始阶梯
        /// </summary>
        public int init_damage_factors{
            get{
                return init_damage_factors_xor.val;
            }
        }
     /// <summary>
        /// 伤害加成比例
        /// </summary>
        public XorDouble add_damage_xor;
     /// <summary>
        /// 伤害加成比例
        /// </summary>
        public double add_damage{
            get{
                return add_damage_xor.val;
            }
        }

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<string, Model> m_dict;

    // Get The Dictionary
    public Dictionary<string, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(string id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictChapterActivity m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_chapter_activity.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<string,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id = DictTypeConvert.ParseString(str[fileReader.typeName2Index["id"]]);
            model.aName = DictTypeConvert.ParseString(str[fileReader.typeName2Index["aName"]]);
            model.desc = DictTypeConvert.ParseString(str[fileReader.typeName2Index["desc"]]);
            model.game_type_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["game_type"]]),fileReader.randomUtil);
            model.shopType_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["shopType"]]),fileReader.randomUtil);
            model.open_time = DictTypeConvert.ParseString(str[fileReader.typeName2Index["open_time"]]);
            model.end_time = DictTypeConvert.ParseString(str[fileReader.typeName2Index["end_time"]]);
            model.shop_end_days_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["shop_end_days"]]),fileReader.randomUtil);
            model.new_player_double_reward_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["new_player_double_reward"]]),fileReader.randomUtil);
            model.tili_prop = DictTypeConvert.ParseString(str[fileReader.typeName2Index["tili_prop"]]);
            model.cooldown_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["cooldown"]]),fileReader.randomUtil);
            model.max_prop_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["max_prop"]]),fileReader.randomUtil);
            model.reset_cost_ruby_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["reset_cost_ruby"]]),fileReader.randomUtil);
            model.add_reward_heros = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["add_reward_heros"]]);
            model.init_damage_factors_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["init_damage_factors"]]),fileReader.randomUtil);
            model.add_damage_xor = new XorDouble(DictTypeConvert.ParseDouble(str[fileReader.typeName2Index["add_damage"]]),fileReader.randomUtil);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictChapterActivity Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
