//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Xor;

public partial class DictPlayerXiuweiLev
{

    // data model
    // [System.Serializable]
    public class Model
    {
     /// <summary>
        /// 等级属性
        /// </summary>
        public XorInt id_xor;
     /// <summary>
        /// 等级属性
        /// </summary>
        public int id{
            get{
                return id_xor.val;
            }
        }
     /// <summary>
        /// 境界名称
        /// </summary>
        public string name;
     /// <summary>
        /// 大境界
        /// </summary>
        public XorInt big_lev_xor;
     /// <summary>
        /// 大境界
        /// </summary>
        public int big_lev{
            get{
                return big_lev_xor.val;
            }
        }
     /// <summary>
        /// 小境界
        /// </summary>
        public XorInt small_lev_xor;
     /// <summary>
        /// 小境界
        /// </summary>
        public int small_lev{
            get{
                return small_lev_xor.val;
            }
        }
     /// <summary>
        /// 品质
        /// </summary>
        public XorInt qulity_xor;
     /// <summary>
        /// 品质
        /// </summary>
        public int qulity{
            get{
                return qulity_xor.val;
            }
        }
     /// <summary>
        /// 图片
        /// </summary>
        public string spriteName;
     /// <summary>
        /// 提升数值
        /// </summary>
        public List<string> advance_add;
     /// <summary>
        /// 进阶任务
        /// </summary>
        public List<string> advance_task;
     /// <summary>
        /// 进阶消耗
        /// </summary>
        public List<string> custom_tasks;
     /// <summary>
        /// 描述
        /// </summary>
        public string desc;
     /// <summary>
        /// 小阶段
        /// </summary>
        public string small_name;
     /// <summary>
        /// 升级修为
        /// </summary>
        public XorLong current_lev_xiuwei_val_xor;
     /// <summary>
        /// 升级修为
        /// </summary>
        public long current_lev_xiuwei_val{
            get{
                return current_lev_xiuwei_val_xor.val;
            }
        }
     /// <summary>
        /// 累计修为
        /// </summary>
        public XorLong xiuwei_val_xor;
     /// <summary>
        /// 累计修为
        /// </summary>
        public long xiuwei_val{
            get{
                return xiuwei_val_xor.val;
            }
        }
     /// <summary>
        /// 修炼分身数量
        /// </summary>
        public XorLong fenshen_num_xor;
     /// <summary>
        /// 修炼分身数量
        /// </summary>
        public long fenshen_num{
            get{
                return fenshen_num_xor.val;
            }
        }

    public virtual Model Clone()
    {
        Model mm = this.MemberwiseClone() as Model;
        return mm;
    }
}

    //
    private Dictionary<int, Model> m_dict;

    // Get The Dictionary
    public Dictionary<int, Model> Dict
    {
        get
        {
            return m_dict;
        }
    }

    private List<Model> m_list;
	public List<Model> getList()
	{
		return m_list;
	}

    // Get The Model By Key
    public Model GetModel(int id)
    {
        if (m_dict == null)
        {
            Debug.LogError("DictPlayerXiuweiLev m_dict Is Null");
            return null;
        }
        else
        {
            if (m_dict.ContainsKey(id))
            {
                return m_dict[id];
            }
            else
            {
                Debug.LogError ("error id:"+id);
                return null;
            }
        }
    }

    private DictString_LoadFinishedCallBack m_loadFinishedCallBack;
    // load the json file
    public void Load(string path,DictString_LoadFinishedCallBack callBack)
    {
        m_loadFinishedCallBack = callBack;

        //
        string filePath = path;
        if(!filePath.EndsWith("/"))
        {
            filePath += "/";
        }

        filePath += GetFileName();
        DictFileReader fileReader = new DictFileReader(filePath, DoParse);
    }

    // get file name
    public string GetFileName()
    {
        return "dict_player_xiuwei_lev.txt";
    }

    // parse the json data
    private void DoParse(DictFileReader fileReader)
    {
        m_dict = new Dictionary<int,Model>();
        m_list = new List<Model>();
        //
        do
        {
            string[] str = fileReader.ReadRow();
            if (str == null || str.Length == 0)
            {
                break;
            }

            //
            Model model = new Model();
            model.id_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["id"]]),fileReader.randomUtil);
            model.name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["name"]]);
            model.big_lev_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["big_lev"]]),fileReader.randomUtil);
            model.small_lev_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["small_lev"]]),fileReader.randomUtil);
            model.qulity_xor = new XorInt( DictTypeConvert.ParseInt(str[fileReader.typeName2Index["qulity"]]),fileReader.randomUtil);
            model.spriteName = DictTypeConvert.ParseString(str[fileReader.typeName2Index["spriteName"]]);
            model.advance_add = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["advance_add"]]);
            model.advance_task = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["advance_task"]]);
            model.custom_tasks = DictTypeConvert.ParseArrayString(str[fileReader.typeName2Index["custom_tasks"]]);
            model.desc = DictTypeConvert.ParseString(str[fileReader.typeName2Index["desc"]]);
            model.small_name = DictTypeConvert.ParseString(str[fileReader.typeName2Index["small_name"]]);
            model.current_lev_xiuwei_val_xor = new XorLong(DictTypeConvert.ParseLong(str[fileReader.typeName2Index["current_lev_xiuwei_val"]]),fileReader.randomUtil);
            model.xiuwei_val_xor = new XorLong(DictTypeConvert.ParseLong(str[fileReader.typeName2Index["xiuwei_val"]]),fileReader.randomUtil);
            model.fenshen_num_xor = new XorLong(DictTypeConvert.ParseLong(str[fileReader.typeName2Index["fenshen_num"]]),fileReader.randomUtil);

            if (m_dict.ContainsKey(model.id) == false)
            {
                m_dict.Add(model.id, model);
                m_list.Add(model);
            }
            else
            {
                Debug.LogError("DictPlayerXiuweiLev Parse:Same Key = " + model.id);
            }

        } while (true);

        if(m_loadFinishedCallBack != null)
        {
            m_loadFinishedCallBack(GetFileName());
        }
    }

}
